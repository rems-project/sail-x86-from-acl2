
/*! Dispatch function for VEX-encoded instructions in the two-byte opcode map */
val vex_0f_execute : (proc_mode, sbits(64), sbits(64), prefixes, bits(8), vex_prefixes, bits(8), modr_m, sib) -> unit

function vex_0f_execute (proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) = {
    if ext_vex_0f_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) then {
        return()
    } else {
        (match opcode {
          16 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          17 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          18 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          19 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          20 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          21 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          22 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          23 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          40 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          41 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          42 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          43 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          44 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          45 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          46 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          47 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          65 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          66 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          68 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          69 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          70 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          71 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          74 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          75 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          80 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          81 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          82 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          83 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          84 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          85 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          86 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          87 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          88 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          89 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          90 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          91 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          92 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          93 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          94 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          95 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          96 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          97 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          98 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          99 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          100 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          101 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          102 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          103 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          104 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          105 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          106 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          107 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          108 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          109 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          110 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          111 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          112 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          113 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b100 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b100 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          114 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b100 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b100 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          115 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b011 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b011 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b110 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b111 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[reg] == 0b111 then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          116 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          117 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          118 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          119 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-8", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-8", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          120 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          121 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          122 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          123 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          124 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          125 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          126 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          127 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          144 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          145 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-K21", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          146 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          147 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          152 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          153 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          174 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & vex_get_pp(vex_prefixes) == 0b000 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & modr_m[reg] == 0b011 then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          194 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          196 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          197 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          198 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          208 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          209 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          210 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          211 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          212 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          213 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          214 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          215 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          216 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          217 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          218 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          219 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          220 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          221 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          222 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          223 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          224 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          225 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          226 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          227 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          228 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          229 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          230 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          231 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          232 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          233 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          234 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          235 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          236 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          237 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          238 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          239 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          240 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          241 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          242 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          243 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          244 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          245 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          246 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          247 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          248 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          249 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          250 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          251 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          252 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          253 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          254 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          _ => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
        }) : unit
    }
}

/*! Dispatch function for VEX-encoded instructions in the first 
 three-byte opcode map */
val vex_0f38_execute : (proc_mode, sbits(64), sbits(64), prefixes, bits(8), vex_prefixes, bits(8), modr_m, sib) -> unit

function vex_0f38_execute (proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) = {
    if ext_vex_0f38_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) then {
        return()
    } else {
        (match opcode {
          0 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          1 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          2 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          3 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          4 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          5 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          6 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          7 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          8 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          9 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          10 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          11 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          12 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          13 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          14 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          15 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          16 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          17 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          18 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          19 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-11", [|":F16C", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":F16C", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-11", [|":F16C", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":F16C", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          20 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          21 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          22 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          23 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          24 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          25 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          26 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          27 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          28 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          29 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          30 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          31 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          32 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          33 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          34 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          35 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          36 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          37 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          38 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          39 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          40 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          41 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          42 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-1", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          43 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          44 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          45 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          46 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          47 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          48 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          49 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          50 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          51 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          52 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          53 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          54 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          55 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          56 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          57 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          58 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          59 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          60 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          61 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          62 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          63 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          64 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          65 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          66 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          67 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          68 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          69 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          70 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          71 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          76 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          77 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          78 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          79 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          82 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          83 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          88 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          89 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          90 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          91 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          100 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          101 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          102 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          117 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          118 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          119 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          120 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          121 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-7", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          122 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          123 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          124 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          125 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          126 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          127 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          131 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          136 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          137 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          138 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          139 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          140 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          141 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          142 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          144 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          145 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          146 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          147 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-12", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          150 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          151 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          152 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          153 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          154 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          155 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          156 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          157 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          158 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          159 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          160 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          161 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          162 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          163 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          166 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          167 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          168 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          169 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          170 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          171 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          172 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          173 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          174 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          175 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          180 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          181 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          182 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          183 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          184 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          185 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          186 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          187 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          188 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          189 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          190 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          191 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":FMA", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":FMA", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          196 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          198 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          199 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          200 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          202 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          203 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          204 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          205 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          219 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          220 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          221 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          222 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          223 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          242 => {
              if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          243 => {
              if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[reg] == 0b001 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[reg] == 0b001 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[reg] == 0b010 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & modr_m[reg] == 0b011 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & modr_m[reg] == 0b011 then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          245 => {
              if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          246 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          247 => {
              if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if vex_get_pp(vex_prefixes) == 0b000 & not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI1", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI1", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x2 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          _ => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
        }) : unit
    }
}

/*! Dispatch function for VEX-encoded instructions in the second 
 three-byte opcode map */
val vex_0f3a_execute : (proc_mode, sbits(64), sbits(64), prefixes, bits(8), vex_prefixes, bits(8), modr_m, sib) -> unit

function vex_0f3a_execute (proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) = {
    if ext_vex_0f3a_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib) then {
        return()
    } else {
        (match opcode {
          0 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          1 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          2 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          3 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          4 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          5 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          6 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          8 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          9 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          10 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          11 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-3", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          12 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          13 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          14 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          15 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          20 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          21 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          22 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          23 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          24 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          25 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          26 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          27 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          29 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-11", [|":F16C", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":F16C", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-11", [|":F16C", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":F16C", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          30 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          31 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          32 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          33 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & not_bool(modr_m[mod] == 0b11) then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          34 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-5", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          35 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          37 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          38 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          39 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          48 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          49 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          50 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512DQ"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512DQ"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512F"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512F"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          51 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b1 & modr_m[mod] == 0b11 then {
                  chk_exc_fn(":LEGACY", ":TYPE-K20", [|":AVX512BW"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX512BW"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          56 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          57 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          58 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          59 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          62 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          63 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          64 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          65 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-2", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          66 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          67 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          68 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":PCLMULQDQ", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":PCLMULQDQ", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          70 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-6", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          74 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          75 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          76 => {
              if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if not_bool(sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111) & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b001 & vex_get_pp(vex_prefixes) == 0b001 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX2"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX2"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          80 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          81 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          84 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          85 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          86 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          87 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          96 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          97 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          98 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          99 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          102 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          103 => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)"),
          223 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & vex_get_pp(vex_prefixes) == 0b001 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-4", [|":AES", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":AES", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          240 => {
              if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b0 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else if sail_sign_extend(vex_get_vvvv(vex_prefixes), 6) == 0b001111 & sail_sign_extend(vex_get_l(vex_prefixes), 3) == 0b000 & sail_sign_extend(vex_get_pp(vex_prefixes), 4) == 0x3 & vex_get_w(vex_prefixes) == 0b1 & false then {
                  chk_exc_fn(":LEGACY", ":TYPE-13", [|":BMI2", ":AVX"|], proc_mode, prefixes, rex_byte, opcode, modr_m, sib);
                  if feature_flags_fn([|":BMI2", ":AVX"|]) == 0 then {
                      x86_fault("(:UD)")
                  };
                  x86_model_error("Opcode Unimplemented in x86isa!")
              } else {
                  x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
              }
          },
          _ => x86_fault("(X86-ILLEGAL-INSTRUCTION \"#UD Encountered!\" START-RIP TEMP-RIP X86)")
        }) : unit
    }
}

/*! <p>@ ( ' vex-decode-and-execute ' ) dispatches control to VEX-encoded 
 instructions.</p> 
 
 <p><i>Reference: Intel Vol. 2A, Section 2.3: Intel Advanced Vector 
 Extensions ( Intel AVX ) </i></p> */
val vex_decode_and_execute : (proc_mode, sbits(64), sbits(64), prefixes, bits(8), vex_prefixes) -> unit

function vex_decode_and_execute (proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes) = {
    let ctx : string = "vex-decode-and-execute";
    if not_bool(rex_byte == 0x00) then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :rex rex-byte)");
    if prefixes[lck] == 0xf0 then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :lock-prefix)");
    if prefixes[rep] == 0xf2 then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :F2-prefix)");
    if prefixes[rep] == 0xf3 then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :F3-prefix)");
    if prefixes[opr] == 0x66 then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :66-prefix)");
    let vex2_prefix? : bool = vex_prefixes[byte0] == 0xc5;
    let vex3_prefix? : bool = vex_prefixes[byte0] == 0xc4;
    let vex_byte1 : bits(8) = vex_prefixes[byte1];
    let (vex3_0f_map?, vex3_0f38_map?, vex3_0f3a_map?) : (bool, bool, bool) = {
        if vex3_prefix? then {
            (Mk_vex3_byte1(vex_byte1)[m_mmmm] == 0b00001, Mk_vex3_byte1(vex_byte1)[m_mmmm] == 0b00010, Mk_vex3_byte1(vex_byte1)[m_mmmm] == 0b00011)
        } else {
            (false, false, false)
        }
    };
    if vex3_prefix? & not_bool(vex3_0f_map? | vex3_0f38_map? | vex3_0f3a_map?) then x86_fault("(!!fault-fresh :ud :vex-prefixes vex-prefixes :m-mmmm vex-byte1)");
    let byte2_next_byte : bits(8) = rme08(proc_mode, select_address_size(proc_mode, Some(prefixes)), temp_rip, None(), 1, ":X");
    let temp_rip : sbits(64) = add_to_iptr(proc_mode, temp_rip, 0x0000000000000001);
    let vex_prefixes : vex_prefixes = {
        if vex3_prefix? then {
            [vex_prefixes with byte2 = byte2_next_byte]
        } else {
            vex_prefixes
        }
    };
    let next_byte : bits(8) = {
        if vex3_prefix? then {
            rme08(proc_mode, select_address_size(proc_mode, Some(prefixes)), temp_rip, None(), 1, ":X")
        } else 0x00
    };
    let temp_rip : sbits(64) = {
        if vex3_prefix? then {
            add_to_iptr(proc_mode, temp_rip, 0x0000000000000001)
        } else {
            temp_rip
        }
    };
    let opcode : bits(8) = {
        if vex3_prefix? then {
            next_byte
        } else {
            byte2_next_byte
        }
    };
    let modr_m? : bool = vex_opcode_modr_m_p(vex_prefixes, opcode);
    let modr_m : modr_m = {
        if modr_m? then {
            Mk_modr_m(rme08(proc_mode, select_address_size(proc_mode, Some(prefixes)), temp_rip, None(), 1, ":X"))
        } else {
            Mk_modr_m(0x00)
        }
    };
    let temp_rip : sbits(64) = {
        if modr_m? then {
            add_to_iptr(proc_mode, temp_rip, 0x0000000000000001)
        } else {
            temp_rip
        }
    };
    let sib? : bool = modr_m? & (let p4? : bool = 0x67 == prefixes[adr] in
    let n16_bit_addressp : bool = 2 == select_address_size(proc_mode, Some(prefixes)) in
      x86_decode_sib_p(modr_m, n16_bit_addressp));
    let sib : sib = {
        if sib? then {
            Mk_sib(rme08(proc_mode, select_address_size(proc_mode, Some(prefixes)), temp_rip, None(), 1, ":X"))
        } else {
            Mk_sib(0x00)
        }
    };
    let temp_rip : sbits(64) = {
        if sib? then {
            add_to_iptr(proc_mode, temp_rip, 0x0000000000000001)
        } else {
            temp_rip
        }
    };
    if vex_prefixes_map_p(0x000f, vex_prefixes) then {
        vex_0f_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib)
    } else if vex_prefixes_map_p(0x0f38, vex_prefixes) then {
        vex_0f38_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib)
    } else if vex_prefixes_map_p(0x0f3a, vex_prefixes) then {
        vex_0f3a_execute(proc_mode, start_rip, temp_rip, prefixes, rex_byte, vex_prefixes, opcode, modr_m, sib)
    } else {
        x86_model_error(":ILLEGAL-VALUE-OF-VEX-M-MMMM")
    }
}
